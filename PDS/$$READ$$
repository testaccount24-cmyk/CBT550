                               STRUCTURED MACROS

  THESE MACROS CAN HELP YOU CREATE NEW PROGRAMS AND MODIFY EXISTING CODE BY
  SUPPORTING IF-THEN-ELSE LOGIC WHILE REQUIRING ONLY A SMALL LEARNING CURVE
  FROM WHAT YOU ALREADY KNOW ABOUT S/390 ASSEMBLER (ASSUMING THAT YOU DO
  KNOW IT ALREADY).  EACH 'IF' STATEMENT CAN BE ARBITRARILY COMPLEX, AND THE
  'IF' STATEMENTS CAN BE NESTED AS MANY LEVELS AS YOU MIGHT NEED (CERTAINLY,
  NO ONE WOULD NEED MORE THAN 255 LEVELS OF NESTING, WOULD SHE?).

  EACH GROUP OF INSTRUCTIONS THAT YOU WANT CONDITIONALLY EXECUTED WOULD BE
  HEADED BY AN 'IF' MACRO, AND TERMINATED BY AN 'ENDIF' MACRO.

  IN ITS SIMPLIST FORM, THE OPERAND OF THE 'IF' MACRO CONSISTS OF AN OP-CODE,
  THE FIRST OPERAND ADDRESS, THE SECOND OPERAND ADDRESS, AND A CONDITION. THESE
  FOUR VALUES MUST BE ENCLOSED WITHIN PARENTHESES, AND FOLLOWING THE OPERANDS
  MUST BE A COMMA AND THE STATEMENT TERMINATING TERM 'THENDO'.

  THE OP-CODE MAY BE ANY VALID S/390 OP-CODE THAT SETS THE CONDITION CODE. THE
  FIRST AND SECOND OPERANDS MAY BE ANY VALUES THAT ARE VALID FOR THE INSTRUCTION
  BEING CREATED. THE CONDITION, SUCH AS 'E' OR 'NO, IS ANY VALUE THAT CAN BE
  USED IN CREATING AN EXTENDED MNEMONIC BRANCH INSTRUCTION (SUCH AS 'BE' OR
  'BNO').

  IF YOU CHOOSE 'E' AS THE CONDITION, THEN THE GROUP OF INSTRUCTIONS BETWEEN THE
  'IF' AND THE 'ENDIF' WILL BE EXECUTED ONLY IF THE CONDITION CODE SET BY THE
  OP-CODE AND OPERANDS SPECIFIED IS A ZERO.

  IN THE FOLLOWING EXAMPLES, THE HEADING WILL INDICATE THE
  CONDITIONS IN WHICH THE DO-GROUP WILL BE EXECUTED. IN EACH CASE,
  AN 'IF' STATEMENT DETERMINES THE CONDITIONS, AND AN 'ENDIF'
  STATEMENT TERMINATES THE DO-GROUP. COMMENTS EITHER IN THE HEADING
  OR ON THE APPROPRIATE INSTRUCTIONS WILL INDICATE THE DETAILS.
       HERE IS AN EXAMPLE:

         IF    (CLC,A,B,NE),THENDO

  THE INSTRUCTIONS BETWEEN THIS 'IF' AND ITS MATCHING 'ENDIF' WILL BE EXECUTED
  IF THE RESULT OF THE 'CLC' IS A 1 OR 2 (THE NOT-EQUAL CONDITION).

       TO EXECUTE THE DO-GROUP IF EITHER ONE OF TWO CONDITIONS IS
  TRUE, THE FORMAT IS:

       IF    (CLC,A,B,NE),OR,(CLC,C,D,NE),THENDO

       ALTERNATE FORMAT:
                                                            72
       IF    (CLC,A,B,NE),OR,                                C
             (CLC,C,D,NE),THENDO

       SINCE 'AND' TAKES PRECEDENCE OVER 'OR', IN THE FOLLOWING
  EXAMPLE, THE DO-GROUP IS PERFORMED IF THE FIRST TEST IS TRUE, OR
  IF BOTH THE SECOND AND THIRD ARE TRUE:

       IF    (CLC,A,B,E),OR,                                 C
             (CLC,C,D,E),AND,                                C
             (CLC,E,F,E),THENDO

       IF THE DO-GROUP IS TO BE PERFORMED IF THE THIRD IS TRUE AND
  EITHER THE FIRST OR SECOND IS TRUE, INCLUDE THE TESTS CONNECTED
  BY THE 'OR' WITHIN ADDITIONAL PARENTHESES:

             * <-NESTING PARENTHESES -> *
       IF    ((CLC,A,B,E),OR,(CLC,C,D,E)),AND,               C
             (CLC,E,F,E),THENDO

       ALTERNATE FORMAT:
                                                            72
       IF    ((CLC,A,B,E),OR,                                C
             (CLC,C,D,E)),AND,                               C
             (CLC,E,F,E),THENDO

       GROUPS OF EXPRESSIONS MAY BE NESTED AS DEEPLY AS REQUIRED
  TO DEFINE THE LOGIC DESIRED.
       EACH DO-GROUP MUST BE TERMINATED WITH AN 'ENDIF' STATEMENT
  OR AN 'ELSE' - 'ENDELSE' COMBINATION:

       ENDIF ,
                   - OR -
       ELSE  ,
       ... ADDITIONAL INSTRUCTIONS TO BE EXECUTED IF 'IF' FAILS
       ENDELSE ,  (OR ENDIF - EITHER IS ACCEPTABLE AFTER AN 'ELSE')

       ALTERNATIVELY, A DO-GROUP CAN BE TERMINATED AS FOLLOWS:

       ELSEIF  (CLC,G,H,E),THENDO ...

       ANY NUMBER OF 'ELSEIF' STATEMENTS CAN FOLLOW THE ORIGINAL
       'IF' STATEMENT. THERE MAY BE (BUT NEED NOT BE) ONE AND ONLY
       ONE 'ELSE' STATEMENT FOLLOWING THE FINAL 'ELSEIF'. THE ENTIRE
       GROUP IS TERMINATED WITH ONE 'ENDIF' OR 'ENDELSE'.

       IF    (...),THENDO            REQUIRED
       ...
       ELSEIF (...),THENDO           OPTIONAL (REPEATED AS REQUIRED)
       ...
       ELSE  ,                       OPTIONAL
       ...
       ENDIF ,                       REQUIRED (OR 'ENDELSE')

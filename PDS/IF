         MACRO
&NAME    IF    &EXP                MULTIPLE OPERANDS VIA &SYSLIST
         COPY  $MGBLDEF            BRING IN GLOBAL SET SYMBOLS
         LCLA  &I,&J,&K            USED TO SCAN &SYSLIST OPERANDS, ETC
         LCLC  &X,&Y,&OP,&OPND1,&OPND2,&OPND3,&C,&NC
&$MRECUR SETA  &$MRECUR+1          INCREASE RECURSION COUNT
         $MLVLMSG &$MRECUR,RECURSION CONDITIONALLY ISSUE MESSAGE
&I       SETA  1                   SET TO FIRST POSITIONAL
&$MNAME  SETC  '&NAME'             TAG FOR FIRST TEST
.LOOP010 AIF   (N'&SYSLIST LT &I).FIN180 GO TO FINISH IF DONE
         AIF   ('&SYSLIST(&I)'(1,1) NE '(').BADC120 MUST BE '('
         AIF   ('&SYSLIST(&I)'(2,1) EQ '(').REC080 GO IF NESTED
&OP      SETC  '&SYSLIST(&I,1)'    OP-CODE IS ALWAYS 1ST SUB-OPERAND
&J       SETA  N'&SYSLIST(&I)      NUMBER OF SUBPARAMETERS FOR THIS ONE
         AIF   (&J NE 2).TEST020   GO TEST FOR 1-OPERAND INST
&$MNAME  &OP   ,                   ZERO OPERANDS - SET CONDITION CODE
&$MC     SETC  '&SYSLIST(&I,2)'    CONDITION IS ALWAYS LAST SUB-OPERAND
         AGO   .FING060            GO SET UP BRANCH INST
.TEST020 ANOP  ,
&OPND1   SETC  '&SYSLIST(&I,2)'    FIRST (ONLY?) OPERAND
         AIF   (&J NE 3).TEST030   GO TEST FOR 2-OPERAND INST
&$MNAME  &OP   &OPND1        ONE OPERAND - SET CONDITION CODE
&$MC     SETC  '&SYSLIST(&I,3)'    CONDITION IS ALWAYS LAST SUB-OPERAND
         AGO   .FING060            GO SET UP BRANCH INST
.TEST030 ANOP  ,
&OPND2   SETC  '&SYSLIST(&I,3)'    SECOND OPERAND
         AIF   (&J NE 4).TEST040   GO TEST FOR 3-OPERAND INST
&$MNAME  &OP   &OPND1,&OPND2 TWO OPERANDS - SET CONDITION CODE
&$MC     SETC  '&SYSLIST(&I,4)'    CONDITION IS ALWAYS LAST SUB-OPERAND
         AGO   .FING060            GO SET UP BRANCH INST
.TEST040 ANOP  ,
&OPND3   SETC  '&SYSLIST(&I,4)'    THIRD OPERAND
         AIF   (&J NE 5).ERR050    GO ISSUE ERROR MESSAGE
&$MNAME  &OP   &OPND1,&OPND2,&OPND3 THREE OPERANDS - SET CONDITION CODE
&$MC     SETC  '&SYSLIST(&I,5)'    CONDITION IS ALWAYS LAST SUB-OPERAND
         AGO   .FING060            GO SET UP BRANCH INST
.ERR050  ANOP  ,
&K       SETA  ((&I+1)/2)          GET SEQUENCE # OF PHRASE IN ERROR
         MNOTE 08,'INVALID NUMBER OF PARMS (&J) IN CONDITIONAL PHRASE #*
               &K &SYSLIST(&I); IT WILL BE OMITTED FROM THE MACRO EXPAN*
               SION'
&$MAXRC  SETA  8
&$MNAME  CLC   *(1),*              PLACE HOLDER
&$MNAME  SETC  ''                  NO DUPES
         JNOP  *                   PLACE HOLDER
&I       SETA  &I+2                INCREMENT
         AGO   .LOOP010            BACK FOR MORE
.FING060 ANOP                      COND CODE NOW SET - TEST IT
&$MNAME  SETC  ''                  C'MON - NO DUPLICATE TAGS, PLEASE
&$MNC    SETC  'N&$MC'             SET TO 'NOT'-CONDITION CODE
         AIF   ('&$MC'(1,1) NE 'N').SKIP070 FALL THROUGH IF 'NE' ETC
&$MNC    SETC  '&$MC'(2,1)         ORIG WAS 'NX' - SET TO 'X'
.SKIP070 ANOP                       EXAMPLE 'NE' - SET TO 'E'
         AIF   ('&SYSLIST(&I+2)' EQ '').FIN180 GO IF END OF STATEMENT
         AIF   ('&SYSLIST(&I+1)' EQ 'OR').OR130 GO IF 'OR'
         AIF   ('&SYSLIST(&I+1)' EQ 'AND').OR130 GO IF 'AND'
         MNOTE 8,'TERM ''&SYSLIST(&I+1)'' ACCEPTED AS AN ''OR'' CLAUSE'
&$MAXRC  SETA  8
         AGO   .OR130              COMMON FOR 'AND' AND 'OR'
.REC080  ANOP                      HERE FOR RECURSIVE CALL
&$MNAME  IF    &SYSLIST(&I,1),&SYSLIST(&I,2),&SYSLIST(&I,3),           C
               &SYSLIST(&I,4),&SYSLIST(&I,5),&SYSLIST(&I,6),           C
               &SYSLIST(&I,7),&SYSLIST(&I,8),&SYSLIST(&I,9),           C
               &SYSLIST(&I,10),&SYSLIST(&I,11),&SYSLIST(&I,12),        C
               &SYSLIST(&I,13),&SYSLIST(&I,14),&SYSLIST(&I,15),        C
               &SYSLIST(&I,16),&SYSLIST(&I,17),&SYSLIST(&I,18),        C
               &SYSLIST(&I,19),&SYSLIST(&I,20),&SYSLIST(&I,21)
         AIF   ('&$MFNAM1(&$MRECUR+1)' EQ '').REC100 GO IF NO FNAM1(+1)
         AIF   ('&$MFNAM1(&$MRECUR)' EQ '').REC090 GO IF NO FNAM1
&X       SETC  '&$MFNAM1(&$MRECUR+1)' TEMP FOR FNAM1(+1)
&$MFNAM1(&$MRECUR+1) SETC ''       NULLIFY
&X       EQU   &$MFNAM1(&$MRECUR)  EQUATE FOR NESTED LOGIC
         AGO   .REC100             TEST PNAM1
.REC090  ANOP
&$MFNAM1(&$MRECUR) SETC '&$MFNAM1(&$MRECUR+1)' PROMOTE
&$MFNAM1(&$MRECUR+1) SETC ''       NULLIFY
.REC100  AIF   ('&$MPNAM1(&$MRECUR+1)' EQ '').REC110 GO IF NO PNAM1(+1)
&$MNAME  SETC  '&$MPNAM1(&$MRECUR+1)' QUEUE FOR TEST INSTRUCTION
&$MPNAM1(&$MRECUR+1) SETC ''       NULLIFY
.REC110  AIF   ('&SYSLIST(&I+2)' EQ '').FIN180 GO IF END OF STATEMENT
         AIF   ('&SYSLIST(&I+1)' EQ  'OR').OR130 GO IF 'OR'
         AIF   ('&SYSLIST(&I+1)' EQ 'AND').OR130 GO IF 'AND'
         AGO   .FIN180             NOT 'OR' OR 'AND' - ASSUME END
.BADC120 MNOTE 12,'''&SYSLIST(&I)'' IS NOT A VALID CONDITIONAL PHRASE: C
               EACH CONDITIONAL PHRASE MUST BE ENCLOSED WITHIN ONE OR MC
               ORE PAIRS OF PARENTHESES. MACRO GENERATION ABORTED.'
&$MAXRC  SETA  12
         AGO   .FIN180             GO WRAP IT UP
.OR130   ANOP                      COMMON FOR 'OR' AND 'AND'
&NC      SETC  '&$MNC'             GEN LOCAL VARIABLES FOR
&C       SETC  '&$MC'              . CONDITION CODE TESTS
&$MNC    SETC  ''                  NULLIFY THE GLOBAL VARIABLES
&$MC     SETC  ''                  . SINCE LOCALS WILL BE USED
         AIF   ('&SYSLIST(&I+1)' EQ 'AND').AND160   GO IF 'AND'
         AIF   ('&$MPNAM1(&$MRECUR)' NE '').OR140 SKIP IF NOT NEEDED
         $MGPNAME                  GET A NEW 'PNAM1'
.OR140   J&C   &$MPNAM1(&$MRECUR)  B IF TRUE TO 'PASS' TAG
&I       SETA  &I+2                BUMP TO NEXT OPERAND
         AIF   ('&$MNAME' EQ '').OR150 GO IF NO PNAM1 QUEUED
&$MNAME  EQU   &$MPNAM1(&$MRECUR)  EQUATE FOR NESTED LOGIC
.OR150   ANOP
&$MNAME  SETC  '&$MFNAM1(&$MRECUR)' QUEUE TAG FOR 'AND' FAILED
&$MFNAM1(&$MRECUR) SETC ''         NULLIFY TAG
         AGO   .LOOP010            AND CONTINUE
.AND160  AIF   ('&$MFNAM1(&$MRECUR)' NE '').AND170 SKIP IF NOT NEEDED
         $MGFNAME                  GET A NEW 'FNAM1'
.AND170  J&NC  &$MFNAM1(&$MRECUR)  B IF FALSE TO 'FAIL' TAG
&I       SETA  &I+2                BUMP TO NEXT
         AGO   .LOOP010            AND BACK
.FIN180  AIF   (&$MRECUR GT 1).MEND260 EARLY EXIT FOR RECURSIVE CALL
         AIF   ('&SYSLIST(&I+1)' EQ 'THENDO').FIN200 THIS IS EXPECTED
         AIF   ('&$MCVERB(&$MDGLVL+1)' EQ 'DO').FIN200 FOR 'DO' MACRO
         AIF   (&$MAXRC GT 4).FIN200 SKIP MESSAGE IF SERIOUS ERROR
         AIF   ('&SYSLIST(&I+1)' EQ '').FIN190 GO ISSUE INFO MNOTE
         MNOTE 4,'TERM ''&SYSLIST(&I+1)'' ACCEPTED AS END OF ''IF'' STAC
               TEMENT'
         AGO   .FIN200
.FIN190  MNOTE 0,'''IF'' MACRO NOT TERMINATED BY ''THENDO'' CLAUSE; PREC
               SENCE OF CLAUSE ASSUMED'
.FIN200  ANOP
&$MAXRC  SETA  0                   FOR FUTURE GENERATIONS
&$MDGLVL SETA  &$MDGLVL+1          UP IF-GROUP LEVEL
         $MLVLMSG &$MDGLVL,NESTING
&$MDGSEQ(&$MDGLVL) SETC '&SYSNDX'  SET IF-GROUP SEQUENCE
&$MIFELS(&$MDGLVL) SETC 'F'        FOR 'IF-FAILED' BRANCH
&$MDGNAM(&$MDGLVL) SETC '&NAME'    SET NAME FOR 'ENDO'
         AIF   ('&$MCVERB(&$MDGLVL)' NE '').SKIP210 ALREADY DEFINED?
&$MCVERB(&$MDGLVL) SETC 'IF'       SHOW VERB BEING EXECUTED
.SKIP210 ANOP
&NC      SETC  '&$MNC'             SET LOCAL VARIABLE
&X       SETC  '$MDF&$MDGSEQ(&$MDGLVL)' GET 'ENDO' TAG
         AIF   ('&$MFNAM1(1)' NE '').FIN220 GO IF F-TAG NEEDED
         AIF   ('&$MNC' EQ '').FIN240 SKIP IF B&NC NOT REQ'D
         J&NC  &X                  B AROUND IF-GROUP IF FALSE
&$MNC    SETC  ''                  FOR FUTURES
         AGO   .FIN240             EXIT
.FIN220  AIF   ('&$MC' EQ '').FIN230 SKIP IF B&C NOT REQ'D
         J&NC  &X                  B AROUND IF-GROUP IF FALSE
&$MNC    SETC  ''                  FOR FUTURES
.FIN230  ANOP
&X       SETC  '&$MFNAM1(1)'       GET 'FNAM1' FROM LEVEL 1
&$MFNAM1(1) SETC ''                NOW NULLIFY IT
&Y       SETC  '$MDF&$MDGSEQ(&$MDGLVL)' GET 'ENDO' TAG
&X       EQU   &Y                  EQUATE FOR NESTED LOGIC
.FIN240  AIF   ('&$MNAME' EQ '').FIN250 GO IF NO TAG QUEUED
&$MNAME  DC    0H'0'         *=*=* BEGINNING OF CONDITIONAL GROUP *=*=*
.FIN250  ANOP
&X       SETC  '&$MPNAM1(1)'       GET 'PNAM1' FROM LEVEL 1
         AIF   ('&X' EQ '').MEND260 GO IF NO 'PNAM1' FROM LEVEL 1
&$MPNAM1(1) SETC  ''               NULLIFY
&X       DC    0H'0'         *=*=* BEGINNING OF CONDITIONAL GROUP *=*=*
.MEND260 ANOP                      STANDARD EXIT
&$MRECUR SETA  &$MRECUR-1          REDUCE RECURSION COUNT
         $MLVLMSG &$MRECUR,RECURSION CONDITIONALLY ISSUE MESSAGE
         MEND
